use encoding::utf8;
use strings;

// A lexical token class.
export type ltok = enum uint {
	// Keep ordered with bmap
	// Alpha sorted
	ATTR_FINI,
	ATTR_INIT,
	ATTR_NORETURN,
	ATTR_OFFSET,
	ATTR_SYMBOL,
	ATTR_TEST,
	UNDERSCORE,
	ABORT,
	ALLOC,
	APPEND,
	AS,
	ASSERT,
	BOOL,
	BREAK,
	CHAR,
	CONST,
	CONTINUE,
	DEF,
	DEFER,
	DELETE,
	ELSE,
	ENUM,
	EXPORT,
	F32,
	F64,
	FALSE,
	FN,
	FOR,
	FREE,
	I16,
	I32,
	I64,
	I8,
	IF,
	INSERT,
	INT,
	IS,
	LEN,
	LET,
	MATCH,
	NULL,
	NULLABLE,
	OFFSET,
	RETURN,
	RUNE,
	SIZE,
	STATIC,
	STR,
	STRUCT,
	SWITCH,
	TRUE,
	TYPE,
	U16,
	U32,
	U64,
	U8,
	UINT,
	UINTPTR,
	UNION,
	USE,
	VOID,
	YIELD,
	LAST_KEYWORD = YIELD,

	// Operators
	BAND,
	BANDEQ,
	BNOT,
	BOR,
	BOREQ,
	BXOR,
	BXOREQ,
	CASE,
	COLON,
	COMMA,
	DIV,
	DIVEQ,
	DOT,
	DOUBLE_COLON,
	ELLIPSIS,
	EQUAL,
	GREATER,
	GREATEREQ,
	LAND,
	LANDEQ,
	LBRACE,
	LBRACKET,
	LEQUAL,
	LESS,
	LESSEQ,
	LNOT,
	LOR,
	LOREQ,
	LPAREN,
	LSHIFT,
	LSHIFTEQ,
	LXOR,
	LXOREQ,
	MINUS,
	MINUSEQ,
	MINUSMINUS,
	MODEQ,
	MODULO,
	NEQUAL,
	PLUS,
	PLUSEQ,
	PLUSPLUS,
	QUESTION,
	RBRACE,
	RBRACKET,
	RPAREN,
	RSHIFT,
	RSHIFTEQ,
	SEMICOLON,
	SLICE,
	TIMES,
	TIMESEQ,
	LAST_BTOK = TIMESEQ,

	LIT_U8,
	LIT_U16,
	LIT_U32,
	LIT_U64,
	LIT_UINT,
	LIT_SIZE,
	LIT_I8,
	LIT_I16,
	LIT_I32,
	LIT_I64,
	LIT_INT,
	LIT_ICONST,
	LIT_F32,
	LIT_F64,
	LIT_FCONST,
	LIT_RUNE,
	LIT_STR,
	LAST_LITERAL = LIT_STR,

	NAME,
	LABEL,
	EOF,
};

const bmap: [_]str = [
	// Keep ordered with tok
	"@fini",
	"@init",
	"@noreturn",
	"@offset",
	"@symbol",
	"@test",
	"_",
	"abort",
	"alloc",
	"append",
	"as",
	"assert",
	"bool",
	"break",
	"char",
	"const",
	"continue",
	"def",
	"defer",
	"delete",
	"else",
	"enum",
	"export",
	"f32",
	"f64",
	"false",
	"fn",
	"for",
	"free",
	"i16",
	"i32",
	"i64",
	"i8",
	"if",
	"insert",
	"int",
	"is",
	"len",
	"let",
	"match",
	"null",
	"nullable",
	"offset",
	"return",
	"rune",
	"size",
	"static",
	"str",
	"struct",
	"switch",
	"true",
	"type",
	"u16",
	"u32",
	"u64",
	"u8",
	"uint",
	"uintptr",
	"union",
	"use",
	"void",
	"yield",
	"&",
	"&=",
	"~",
	"|",
	"|=",
	"^",
	"^=",
	"=>",
	":",
	",",
	"/",
	"/=",
	".",
	"::",
	"...",
	"=",
	">",
	">=",
	"&&",
	"&&=",
	"{",
	"[",
	"==",
	"<",
	"<=",
	"!",
	"||",
	"||=",
	"(",
	"<<",
	"<<=",
	"^^",
	"^^=",
	"-",
	"-=",
	"--",
	"%=",
	"%",
	"!=",
	"+",
	"+=",
	"++",
	"?",
	"}",
	"]",
	")",
	">>",
	">>=",
	";",
	"..",
	"*",
	"*=",
];

// The value "null".
export type _null = void;

// A token value, used for tokens such as '1337' (an integer).
export type value = (str | rune | i64 | u64 | f64 | void);

// A location within a source file.
// The path is borrowed from the file name given to the lexer.
export type location = struct {
	path: str,
	line: uint,
	col: uint
};

// A single lexical token.
export type token = (ltok, value, location);

// Converts a token to its string representation.
export fn tokstr(tok: token) const str = {
	if (tok.0 <= ltok::LAST_BTOK) {
		return bmap[tok.0: int];
	};
	return switch (tok.0) {
		ltok::LIT_U8 => "u8",
		ltok::LIT_U16 => "u16",
		ltok::LIT_U32 => "u32",
		ltok::LIT_U64 => "u64",
		ltok::LIT_UINT => "uint",
		ltok::LIT_SIZE => "size",
		ltok::LIT_I8 => "i8",
		ltok::LIT_I16 => "i16",
		ltok::LIT_I32 => "i32",
		ltok::LIT_I64 => "i64",
		ltok::LIT_INT => "int",
		ltok::LIT_ICONST => "iconst",
		ltok::LIT_F32 => "f32",
		ltok::LIT_F64 => "f64",
		ltok::LIT_FCONST => "fconst",
		ltok::LIT_RUNE => "rune",
		ltok::LIT_STR => "str",
		ltok::NAME => tok.1 as str,
		ltok::LABEL => abort(), // TODO
		ltok::EOF => "EOF",
		* => abort(),
	};
};
