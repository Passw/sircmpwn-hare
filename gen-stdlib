#!/bin/sh
# The purpose of this script is to generate make targets for the Hare standard
# library. If you are adding new modules to the standard library, write a
# function for that module (e.g. encoding_utf8), and call the following helper
# commands:
#
# gen_srcs module::name list.ha of.ha sources.ha
# gen_ssa module::name list of module::names yours depends on
#
# Then add your module to the list of modules at the bottom.
#
# Then run ./gen-stdlib > mk/stdlib.mk to generate new rules.

srcdir="$(dirname "$0")"
eval ". $srcdir/mk/gen-stdlib.sh"

gensrcs_rt() {
	gen_srcs rt \
		'$(PLATFORM)/env.ha' \
		'$(PLATFORM)/errno.ha' \
		'$(PLATFORM)/segmalloc.ha' \
		'$(PLATFORM)/start.ha' \
		'$(PLATFORM)/stat.ha' \
		'$(PLATFORM)/$(ARCH).ha' \
		'$(PLATFORM)/syscallno$(ARCH).ha' \
		'$(PLATFORM)/syscalls.ha' \
		'$(PLATFORM)/types.ha' \
		'$(ARCH)/jmp.ha' \
		ensure.ha \
		jmp.ha \
		malloc.ha \
		memcpy.ha \
		memset.ha \
		strcmp.ha \
		$*
}

rt() {
	# This one is complicated, don't use it as a reference for other modules
	printf '# rt\n'
	if [ $testing -eq 0 ]
	then
		printf '%s\n' 'rtscript=$(STDLIB)/rt/hare.sc'
		gensrcs_rt \
			'$(PLATFORM)/abort.ha' \
			start.ha
	else
		gensrcs_rt \
			'+test/$(PLATFORM).ha' \
			+test/abort.ha \
			+test/cstring.ha \
			+test/start.ha \
			+test/ztos.ha
	fi
	gen_ssa rt
	cat <<EOF
\$($cache)/rt/start.o: \$(STDLIB)/rt/\$(PLATFORM)/start\$(ARCH).s
	@printf 'AS \t\$@\n'
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$<

${stdlib}_asm=\$($cache)/rt/syscall.o \\
	\$($cache)/rt/setjmp.o \\
	\$($cache)/rt/longjmp.o

\$($cache)/rt/syscall.o: \$(STDLIB)/rt/\$(PLATFORM)/syscall\$(ARCH).s
	@printf 'AS \t\$@\n'
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$<

\$($cache)/rt/setjmp.o: \$(STDLIB)/rt/\$(ARCH)/setjmp.s
	@printf 'AS \t\$@\n'
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$<

\$($cache)/rt/longjmp.o: \$(STDLIB)/rt/\$(ARCH)/longjmp.s
	@printf 'AS \t\$@\n'
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$<

\$($cache)/rt/rt.a: \$($cache)/rt/rt.o \$(${stdlib}_asm)
	@printf 'AR\t\$@\n'
	@\$(AR) -csr \$@ \$($cache)/rt/rt.o \$(${stdlib}_asm)

${stdlib}_rt=\$($cache)/rt/rt.a
${stdlib}_start=\$($cache)/rt/start.o
hare_${stdlib}_deps+=\$(${stdlib}_rt)

EOF
}

ascii() {
	printf '# ascii\n'
	gen_srcs ascii \
		ctype.ha \
		strcmp.ha
	gen_ssa ascii strings
}

bufio() {
	printf '# bufio\n'
	gen_srcs bufio \
		dynamic.ha \
		fixed.ha
	gen_ssa bufio io bytes strings
}

bytes() {
	printf '# bytes\n'
	gen_srcs bytes \
		contains.ha \
		copy.ha \
		equal.ha \
		index.ha \
		reverse.ha \
		tokenize.ha
	gen_ssa bytes types
}

crypto_math() {
	printf '# crypto::math\n'
	gen_srcs crypto::math \
		bits.ha
	gen_ssa crypto::math
}

crypto_random() {
	printf '# crypto::random\n'
	gen_srcs crypto::random \
		'$(PLATFORM).ha' \
		random.ha
	gen_ssa crypto::random rt io
}

gensrcs_crypto_sha256() {
	gen_srcs crypto::sha256 \
		sha256.ha \
		$*
}

genssa_crypto_sha256() {
	gen_ssa crypto::sha256 hash io endian $*
}

crypto_sha256() {
	printf '# crypto::sha256\n'
	if [ $testing -eq 0 ]
	then
		gensrcs_crypto_sha256
		genssa_crypto_sha256
	else
		gensrcs_crypto_sha256 \
			+test.ha
		genssa_crypto_sha256 fmt strio strings
	fi
}

dirs() {
	printf '# dirs\n'
	gen_srcs dirs \
		xdg.ha
	gen_ssa dirs fs os path
}

encoding_hex() {
	printf '# encoding::hex\n'
	gen_srcs encoding::hex \
		hex.ha
	gen_ssa encoding::hex io strconv strio strings
}

encoding_utf8() {
	# XXX: Also has ordering issues
	printf '# encoding::utf8\n'
	gen_srcs encoding::utf8 \
		rune.ha \
		decode.ha \
		encode.ha
	gen_ssa encoding::utf8 types
}

endian() {
	printf '# endian\n'
	gen_srcs endian \
		big.ha \
		little.ha \
		endian.ha \
		'host$(ARCH).ha'
	gen_ssa endian
}

fmt() {
	printf '# fmt\n'
	gen_srcs fmt \
		fmt.ha
	gen_ssa fmt bufio io os strconv strings types
}

format_elf() {
	printf '# format::elf\n'
	gen_srcs format::elf \
		types.ha
	gen_ssa format::elf
}

fs() {
	printf '# fs\n'
	gen_srcs fs \
		types.ha \
		fs.ha \
		util.ha
	gen_ssa fs io strings path
}

hare_ast() {
	printf '# hare::ast\n'
	gen_srcs hare::ast \
		types.ha
	gen_ssa hare::ast
}

gensrcs_hare_lex() {
	gen_srcs hare::lex \
		token.ha \
		lex.ha \
		$*
}

hare_lex() {
	printf '# hare::lex\n'
	if [ $testing -eq 0 ]
	then
		gensrcs_hare_lex
	else
		gensrcs_hare_lex \
			+test.ha
	fi
	gen_ssa hare::lex io bufio strings types fmt sort
}

hare_module() {
	printf '# hare::module\n'
	gen_srcs hare::module \
		types.ha \
		context.ha \
		scan.ha
	gen_ssa hare::module \
		hare::ast hare::lex hare::parse strio fs io strings hash \
		crypto::sha256 dirs
}

gensrcs_hare_parse() {
	gen_srcs hare::parse \
		types.ha \
		util.ha \
		parse.ha \
		$*
}

hare_parse() {
	printf '# hare::parse\n'
	if [ $testing -eq 0 ]
	then
		gensrcs_hare_parse
	else
		gensrcs_hare_parse \
			+test.ha
	fi
	gen_ssa hare::parse hare::ast hare::lex slice
}

hash() {
	printf '# hash\n'
	gen_srcs hash \
		hash.ha
	gen_ssa hash io
}

hash_fnv() {
	printf '# hash::fnv\n'
	gen_srcs hash::fnv \
		fnv.ha
	gen_ssa hash::fnv hash io strings
}

gensrcs_io() {
	gen_srcs io \
		'arch$(ARCH).ha' \
		types.ha \
		copy.ha \
		println.ha \
		stream.ha \
		limit.ha \
		strings.ha \
		tee.ha \
		$*
}

io() {
	# XXX: Sort me only after fixing forward references to alias types
	# Sort it to see what the problem is if you don't understand
	printf '# io\n'
	if [ $testing -eq 0 ]
	then
		gensrcs_io
	else
		if [ "$(uname -m)" = "aarch64" ]
		then
			# Test is broken on aarch64, temporarily disabled
			# https://todo.sr.ht/~sircmpwn/hare-v2/196
			gensrcs_io
		else
			gensrcs_io \
				+test/copy.ha \
				+test/limit.ha \
				+test/stream.ha \
				+test/strings.ha
		fi
	fi
	gen_ssa io strings
}

os() {
	printf '# os\n'
	gen_srcs os \
		'$(PLATFORM)/environ.ha' \
		'$(PLATFORM)/errors.ha' \
		'$(PLATFORM)/exit.ha' \
		'$(PLATFORM)/dirfdfs.ha' \
		'$(PLATFORM)/fdstream.ha' \
		'$(PLATFORM)/open.ha' \
		'$(PLATFORM)/stdfd.ha' \
		'$(PLATFORM)/fs.ha' \
		stdfd.ha \
		fs.ha
	gen_ssa os io strings types fs encoding::utf8
}

os_exec() {
	printf '# os::exec\n'
	gen_srcs os::exec \
		'$(PLATFORM).ha' \
		types.ha \
		'process$(PLATFORM).ha' \
		'cmd$(PLATFORM).ha' \
		cmd.ha
	gen_ssa os::exec os strings fmt
}

path() {
	printf '# path\n'
	gen_srcs path \
		'$(PLATFORM).ha' \
		util.ha \
		join.ha \
		norm.ha \
		names.ha
	gen_ssa path strings bufio bytes
}

gensrcs_strconv() {
	gen_srcs strconv \
		types.ha \
		itos.ha \
		utos.ha \
		stou.ha \
		stoi.ha \
		numeric.ha \
		$*
}

slice() {
	printf '# slice\n'
	gen_srcs slice \
		reverse.ha
	gen_ssa slice
}

gensrcs_sort() {
	gen_srcs sort \
		search.ha \
		$*
}

sort() {
	printf '# sort\n'
	if [ $testing -eq 0 ]
	then
		gensrcs_sort
	else
		gensrcs_sort \
			+test.ha
	fi
	gen_ssa sort
}

strconv() {
	printf '# strconv\n'
	if [ $testing -eq 0 ]
	then
		gensrcs_strconv
	else
		gensrcs_strconv \
			+test/stou.ha \
			+test/stoi.ha
	fi
	gen_ssa strconv types strings ascii
}

strings() {
	printf '# strings\n'
	gen_srcs strings \
		concat.ha \
		contains.ha \
		cstrings.ha \
		dup.ha \
		iter.ha \
		sub.ha \
		suffix.ha \
		tokenize.ha \
		utf8.ha
	gen_ssa strings bytes encoding::utf8 types
}

strio() {
	printf '# strio\n'
	gen_srcs strio \
		dynamic.ha \
		fixed.ha \
		ops.ha
	gen_ssa strio io strings
}

types() {
	printf '# types\n'
	gen_srcs types \
		limits.ha \
		classes.ha \
		'arch$(ARCH).ha'
	gen_ssa types
}

printf '# This file is generated by the gen-stdlib script, do not edit it by hand\n\n'

modules="ascii
bufio
bytes
crypto_math
crypto_random
crypto_sha256
dirs
encoding_hex
encoding_utf8
endian
fmt
format_elf
fs
hare_ast
hare_lex
hare_module
hare_parse
hash
hash_fnv
io
os
os_exec
path
slice
sort
strconv
strings
strio
types"
stdlib() {
	rt
	for module in $modules; do
		gen_lib "$(printf "%s" "$module" | tr -s '_' '::')"
	done
	for module in $modules; do
		"$module"
	done
}

genrules
genrules test
