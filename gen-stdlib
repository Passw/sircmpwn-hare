#!/bin/sh
# The purpose of this script is to generate make targets for the Hare standard
# library. If you are adding new modules to the standard library, write a
# function for that module (e.g. encoding_utf8), and call the following helper
# commands:
#
# gen_srcs module::name list.ha of.ha sources.ha
# gen_ssa module::name list of module::names yours depends on
# gen_lib module::name
#
# Then add your module to the list of modules at the bottom, making sure it
# comes after any of its dependencies.
#
# Then run ./gen-stdlib > mk/stdlib.mk to generate new rules.

srcdir="$(dirname "$0")"
eval ". $srcdir/mk/gen-stdlib.sh"
cache=HARECACHE

rt() {
	# This one is complicated, don't use it as a reference for other modules
	printf '# rt\n'
	printf '%s\n' 'rtscript=$(STDLIB)/rt/hare.sc'
	gen_srcs rt \
		'$(PLATFORM)/abort.ha' \
		'$(PLATFORM)/env.ha' \
		'$(PLATFORM)/errno.ha' \
		'$(PLATFORM)/start.ha' \
		'$(PLATFORM)/syscallno$(ARCH).ha' \
		'$(PLATFORM)/syscalls.ha' \
		'$(PLATFORM)/segmalloc.ha' \
		malloc.ha \
		memcpy.ha \
		memset.ha \
		strcmp.ha \
		start-test.ha
	gen_ssa rt
	cat <<EOF
\$($cache)/rt/syscall.o: \$(STDLIB)/rt/\$(PLATFORM)/syscall\$(ARCH).s
	@printf 'AS \t\$@\n'
	@mkdir -p \$(HARECACHE)/rt
	@as -o \$@ \$<

\$($cache)/rt/start.o: \$(STDLIB)/rt/\$(PLATFORM)/start.s
	@printf 'AS \t\$@\n'
	@mkdir -p \$($cache)/rt
	@as -o \$@ \$<

\$($cache)/rt/rt.a: \$($cache)/rt/rt.o \$($cache)/rt/syscall.o
	@printf 'AR\t\$@\n'
	@\$(AR) -csr \$@ \$($cache)/rt/rt.o \$($cache)/rt/syscall.o

stdlib_rt=\$($cache)/rt/rt.a
stdlib_start=\$($cache)/rt/start.o

EOF
}

ascii() {
	printf '# ascii\n'
	gen_srcs ascii \
		ctype.ha
	gen_ssa ascii
	gen_lib ascii
}

bytes() {
	printf '# bytes\n'
	gen_srcs bytes \
		copy.ha \
		equal.ha \
		index.ha \
		reverse.ha
	gen_ssa bytes
	gen_lib bytes
}

types() {
	printf '# types\n'
	gen_srcs types \
		limits.ha \
		classes.ha \
		'arch$(ARCH).ha'
	gen_ssa types
	gen_lib types
}

strconv() {
	printf '# strconv\n'
	gen_srcs strconv \
		itos.ha \
		utos.ha \
		numeric.ha
	gen_ssa strconv types
	gen_lib strconv
}

io() {
	# XXX: Sort me only after fixing forward references to alias types
	# Sort it to see what the problem is if you don't understand
	printf '# io\n'
	gen_srcs io \
		types.ha \
		copy.ha \
		println.ha \
		stream.ha
	gen_ssa io
	gen_lib io
}

encoding_utf8() {
	# XXX: Also has ordering issues
	printf '# encoding::utf8\n'
	gen_srcs encoding::utf8 \
		rune.ha \
		decode.ha \
		encode.ha
	gen_ssa encoding::utf8 types
	gen_lib encoding::utf8
}

strings() {
	printf '# strings\n'
	gen_srcs strings \
		cstrings.ha \
		dup.ha \
		iter.ha \
		utf8.ha
	gen_ssa strings encoding::utf8 types
	gen_lib strings
}

os() {
	printf '# os\n'
	gen_srcs os \
		'$(PLATFORM)/environ.ha' \
		'$(PLATFORM)/errors.ha' \
		'$(PLATFORM)/exit.ha' \
		'$(PLATFORM)/fdstream.ha' \
		'$(PLATFORM)/open.ha' \
		'$(PLATFORM)/stdfd.ha' \
		environ.ha \
		stdfd.ha
	gen_ssa os strings types
	gen_lib os
}

fmt() {
	printf '# fmt\n'
	gen_srcs fmt \
		fmt.ha
	gen_ssa fmt io os strconv strings types
	gen_lib fmt
}

printf '# This file is generated by the gen-stdlib script, do not edit it by hand\n\n'

# Keep me ordered with respect to dependencies
rt
ascii
bytes
types
strconv
io
encoding_utf8
strings
os
fmt
